(() => {
  // ---- Timing overrides ----
  const originalSetTimeout = window.setTimeout;
  const originalSetInterval = window.setInterval;
  const originalOpen = window.open;

  window.setTimeout = (fn, delay) => originalSetTimeout(fn, Math.min(delay, 1));
  window.setInterval = (fn, delay) => originalSetInterval(fn, Math.min(delay, 1));

  // ---- State ----
  let stopped = false;
  let retryCount = 0;

  function closeBypass() {
    stopped = true;
    if (overlay && overlay.parentNode) overlay.parentNode.removeChild(overlay);
    if (closeBtn && closeBtn.parentNode) closeBtn.parentNode.removeChild(closeBtn);
    try { window.open = originalOpen; } catch {}
  }

  // ---- UI Overlay ----
  const overlay = document.createElement("div");
  Object.assign(overlay.style, {
    position: "fixed",
    inset: '0',
    width: "100%",
    height: "100%",
    background: "linear-gradient(135deg, #0a2342, #004d7a)",
    zIndex: "2147483646",
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    userSelect: "none",
    opacity: '0',
    transition: "opacity 0.5s"
  });

  const progressText = document.createElement('h1');
  Object.assign(progressText.style, {
    color: "#00ffd7",
    fontSize: "5vw",
    fontWeight: "900",
    fontFamily: "monospace",
    margin: '0',
    textAlign: 'center',
    textShadow: "0 0 6px #00ffd7, 0 0 10px #00ffd7"
  });
  overlay.appendChild(progressText);

  const statusText = document.createElement('div');
  Object.assign(statusText.style, {
    color: '#a0fff0',
    fontSize: '2vw',
    marginTop: '0.5em',
    textShadow: '0 0 3px #00bba1'
  });
  overlay.appendChild(statusText);

  const progressBarContainer = document.createElement('div');
  Object.assign(progressBarContainer.style, {
    width: '40vw',
    maxWidth: '400px',
    height: '8px',
    backgroundColor: 'rgba(0,255,215,0.2)',
    borderRadius: '4px',
    marginTop: '2em',
    overflow: 'hidden'
  });
  const progressBar = document.createElement('div');
  Object.assign(progressBar.style, {
    width: '0%',
    height: '100%',
    backgroundColor: '#00ffd7',
    borderRadius: '4px',
    transition: 'width 0.3s'
  });
  progressBarContainer.appendChild(progressBar);
  overlay.appendChild(progressBarContainer);

  const closeBtn = document.createElement('button');
  closeBtn.textContent = 'âœ•';
  Object.assign(closeBtn.style, {
    position: 'fixed',
    top: '12px',
    right: '12px',
    background: 'rgba(0,0,0,0.65)',
    border: '1px solid rgba(255,255,255,0.08)',
    color: '#fff',
    fontSize: '20px',
    cursor: 'pointer',
    zIndex: '2147483647',
    padding: '6px 10px',
    borderRadius: '6px',
    display: 'block'
  });
  closeBtn.addEventListener('click', closeBypass);

  document.body.appendChild(overlay);
  document.body.appendChild(closeBtn);

  requestAnimationFrame(() => overlay.style.opacity = '1');

  // ---- Animated text ----
  let dotCount = 0;
  const updateText = () => {
    progressText.textContent = 'Bypassing' + '.'.repeat(dotCount) + ' '.repeat(3 - dotCount);
    dotCount = (dotCount + 1) % 4;
  };
  const textInterval = setInterval(() => {
    if (stopped) return clearInterval(textInterval);
    updateText();
  }, 1000);

  // ---- Utility functions ----
  function clickElement(selector, delay = 10, maxRetries = 5) {
    return new Promise(resolve => {
      let attempts = 0;
      const tryClick = () => {
        if (stopped) return resolve();
        const el = document.querySelector(selector);
        if (el) {
          try { el.click(); console.log('Clicked:', selector); } catch {}
          return resolve();
        } else if (++attempts < maxRetries) {
          setTimeout(tryClick, delay);
        } else {
          console.warn('Failed to click:', selector);
          resolve();
        }
      };
      tryClick();
    });
  }

  function clickAllChildren(containerSelector) {
    const children = Array.from(document.querySelectorAll(containerSelector + ' *'));
    children.forEach(el => { try { el.click(); } catch {} });
  }

  // ---- Fingerprint spoof ----
  function generateFingerprint() {
    return 'pdfeditor-' + 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
      const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 3 | 8);
      return v.toString(16);
    });
  }

  window.chrome = window.chrome || {};
  chrome.runtime = chrome.runtime || {};
  const originalSendMessage = chrome.runtime.sendMessage;
  chrome.runtime.sendMessage = function(...args) {
    if (args[0]?.message === 'wk_installed') return args[2]?.({ success: true });
    if (args[0]?.type === 'getFingerprint') return args[1]?.(generateFingerprint());
    if (args[0]?.type === 'getAdblockerStatus') return args[1]?.(false);
    return originalSendMessage?.apply(this, args);
  };

  // ---- Steps ----
  const steps = [
    { selector: ".large.accessBtn.pos-relative.svelte-s4fbka", delay: 250 },
    { selector: ".w-full.bg-gray-100.hover\\:bg-gray-200.active\\:bg-gray-300.text-gray-700.py-4.rounded-full.font-medium.transition-colors", delay: 200 },
    { selector: ".large.accessBtn.pos-relative.svelte-s4fbka", delay: 200 },
    { selector: 'DO NOTHING', delay: 0 },
    { selector: ".w-full.h-14.px-6.text-lg.font-semibold.rounded-full.transition-all.duration-200.flex.items-center.justify-center.space-x-3.bg-green-600.text-white.hover\\:bg-green-700.shadow-lg.hover\\:shadow-xl", delay: 300 },
    { selector: ".interestedBtn.button", delay: 250 },
    { selector: "button.large.accessBtn", delay: 500 }
  ];

  async function runSteps(index = 0) {
    if (stopped) return;
    if (index >= steps.length) {
      statusText.textContent = 'Completed!';
      progressBar.style.width = '100%';
      return;
    }
    const step = steps[index];
    statusText.textContent = `Step ${index + 1} / ${steps.length}`;
    progressBar.style.width = ((index) / (steps.length - 1) * 100) + '%';

    if (step.selector === 'DO NOTHING') return runSteps(index + 1);

    await clickElement(step.selector, step.delay);

    // Step 4 fallback
    if (index === 4) clickAllChildren('.stepcont.svelte-ck84f7');

    // Special redirect fetch for step 3
    if (index === 3) {
      const url = btoa(window.location.href);
      const fingerprint = localStorage.getItem('pdfeditor_fingerprint') || generateFingerprint();
      localStorage.setItem('pdfeditor_fingerprint', fingerprint);
      try {
        const res = await fetch(`https://pass.work.ink/redirect/${encodeURIComponent(url)}?fingerprint=${encodeURIComponent(fingerprint)}&adblockerInstalled=0&base64=1&json=1`);
        const json = await res.json();
        if (json.to) window.location.href = json.to;
      } catch (e) { console.warn('Redirect fetch failed', e); }
    }

    runSteps(index + 1);
  }

  runSteps();
})();
